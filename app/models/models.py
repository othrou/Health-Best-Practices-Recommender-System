from pydantic import BaseModel, Field,EmailStr
from typing import List, Dict, Any, Optional

# --- Request Models ---


class FreeTextRequest(BaseModel):
    session_id: str = Field(..., description="A unique identifier for the user session.")
    text: str = Field(..., description="The user's free-text description of their symptoms.")
    user_id: Optional[str] = Field(None, description="Optional user identifier for personalized recommendations.")
    timestamp: Optional[str] = Field(None, description="ISO 8601 timestamp of when the input was provided.")

class QuestionnaireRequest(BaseModel):
    session_id: str = Field(..., description="A unique identifier for the user session.")
    responses: Dict[str, Any] = Field(..., description="User's answers from the questionnaire.")

# --- Data Models ---

class Recommendation(BaseModel):
    practice_name: str
    relevance_score: float
    matched_symptoms: List[str]

# --- Response Models ---

class RecommendationResponse(BaseModel):
    session_id: str
    recommended_practice: Recommendation
    generated_advice: str = Field(description="Detailed advice generated by the AI agent.")
    sources: List[Dict[str, str]] = Field(description="Sources used for the recommendation.")

class ErrorResponse(BaseModel):
    session_id: str
    error: str
    message: str

# --- Feedback Model ---

class Feedback(BaseModel):
    session_id: str
    rating: int
    comment: str 
    practice_name: Optional[str] = None  # Optionnel pour analyse


# --- authentication model ---

class UserCreate(BaseModel):
    """
    Pydantic model for user registration.
    Ensures the client provides a valid email and a password.
    """
    email: EmailStr
    password: str

class TokenResponse(BaseModel):
    """
    Pydantic model for the response sent after a successful login.
    Contains the JWT access token.
    """
    access_token: str
    token_type: str = "bearer"