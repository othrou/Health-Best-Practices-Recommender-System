import logging
import json
from typing import Dict, List
from agno.agent import Agent
from agno.models.google import Gemini
from app.config import Settings
from fuzzywuzzy import fuzz


logger = logging.getLogger(__name__)

# Liste des mots-cl√©s d'urgence. √Ä enrichir en consultation avec des professionnels.
RED_FLAGS = [
    "douleur thoracique", "douleur poitrine", "pression poitrine", "serrement poitrine",
    "difficult√© √† respirer", "souffle court", "√©touffement",
    "perte de conscience", "√©vanouissement",
    "confusion soudaine", "difficult√© √† parler",
    "engourdissement visage", "engourdissement bras", "engourdissement jambe",
    "saignement incontr√¥lable", "h√©morragie",
    "pens√©es suicidaires", "faire du mal"
]

class InputValidationService:
    def __init__(self, settings: Settings):
        self.settings = settings
        self.context_analysis_agent = Agent(
            name="Analyseur de Contexte Utilisateur",
            model=Gemini(id=self.settings.GEMINI_MODEL_NAME, temperature=0.0),
            instructions=self._get_agent_prompt(),
            show_tool_calls=False,
            markdown=True,
        )
        logger.info("ü§ñ Agent d'analyse de contexte initialis√©.")

    def _get_agent_prompt(self) -> str:
        return """
        Tu es un assistant IA expert en analyse de texte. Ta mission est d'√©valuer la demande d'un utilisateur pour un syst√®me de recommandation de bien-√™tre.
        Tu dois corriger le texte, √©valuer s'il contient assez d'informations pour une recommandation pertinente, et retourner ta r√©ponse dans un format JSON strict.

        ## T√ÇCHES
        1.  **Correction**: Corrige les fautes d'orthographe et de grammaire du texte fourni.
        2.  **Analyse de Contexte**: √âvalue si le texte corrig√© contient des informations suffisantes. Un contexte suffisant doit d√©crire un ou plusieurs sympt√¥mes, une dur√©e, une intensit√© ou un contexte √©motionnel sans etre exhaustif. Un simple "je suis fatigu√©" est insuffisant. "Je suis √©puis√© depuis des semaines et je n'arrive plus √† me concentrer au travail" est suffisant.
        3.  **G√©n√©ration de Question**: Si le contexte est insuffisant, formule UNE seule question ouverte et bienveillante pour encourager l'utilisateur √† donner plus de d√©tails.
        4.  **Notation**: Donne un score de confiance de 0.0 √† 1.0 sur la suffisance du contexte, en cas de doute donne un score sup√©rieur √† 0.4.

        ## FORMAT DE SORTIE
        Ta r√©ponse doit √™tre UNIQUEMENT un objet JSON valide, sans aucun autre texte avant ou apr√®s. Voici la structure :
        {
          "corrected_text": "Le texte de l'utilisateur apr√®s correction.",
          "context_sufficient": true,
          "confidence_score": 0.9,
          "clarifying_question": null,
          "reasoning": "L'utilisateur d√©crit plusieurs sympt√¥mes et un contexte."
        }

        Si le contexte est insuffisant :
        {
          "corrected_text": "Le texte de l'utilisateur apr√®s correction.",
          "context_sufficient": false,
          "confidence_score": 0.2,
          "clarifying_question": "J'ai besoin de plus de contexte. Pourriez-vous m'en dire un peu plus sur ce que vous ressentez ?",
          "reasoning": "Le texte est trop court et ne d√©crit pas de sympt√¥me pr√©cis."
        }
        """

    def check_for_red_flags(self, text: str) -> bool:
        """V√©rifie la pr√©sence de mots-cl√©s d'urgence dans le texte."""
        text_lower = text.lower()
        for flag in RED_FLAGS:
            if flag in text_lower:
                logger.warning(f"üö© Red Flag d√©tect√© : '{flag}' dans le texte de l'utilisateur.")
                return True
            if fuzz.partial_ratio(text_lower, flag) > 80: 
                logger.warning(f"üö© Red Flag d√©tect√© : '{flag}' dans le texte de l'utilisateur.")
                return True
        return False


    async def validate_and_process_input(self, text: str) -> Dict:
        """
        Orchestre la validation compl√®te : v√©rification d'urgence puis analyse par l'agent.
        """
        # 1. V√©rification des cas d'urgence
        if self.check_for_red_flags(text):
            return {
                "status": "emergency",
                "message": "Vos sympt√¥mes semblent n√©cessiter une attention m√©dicale imm√©diate. Veuillez consulter un professionnel de sant√© sans tarder."
            }

        # 2. Analyse par l'agent IA
        try:
            response = await self.context_analysis_agent.arun(text)
            content = response.content

            # Supprimer les balises de bloc de code Markdown si elles existent
            if content.strip().startswith("```json"):
                content = content.strip()[7:-3].strip() # Enl√®ve ```json et ```

            analysis_result = json.loads(content)
            
            # 3. D√©cision bas√©e sur le score de confiance
            if analysis_result["confidence_score"] < 0.4:
                analysis_result["status"] = "insufficient"
            else:
                analysis_result["status"] = "ok"
            
            return analysis_result

        except (json.JSONDecodeError, KeyError) as e:
            logger.error(f"Erreur lors de l'analyse du contexte par l'agent : {e}. R√©ponse de l'agent : {response.content}")
            # Fallback de s√©curit√© : on consid√®re le contexte comme suffisant pour ne pas bloquer l'utilisateur
            return {
                "status": "ok",
                "corrected_text": text,
                "reasoning": "Fallback: L'analyse de l'agent a √©chou√©, on proc√®de avec le texte original."
            }
